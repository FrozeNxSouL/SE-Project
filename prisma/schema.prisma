generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "rhel-openssl-1.0.x"]
  // output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  imageUrl      String[]
  name          String
  price         Float
  tag           String[]
  status        String
  auction       Auction?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @db.ObjectId
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?      @db.ObjectId

  @@map("products")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String[]
  email          String        @unique
  hashedPassword String
  phone          String
  picture        String
  score          Float
  role           String
  auction        Auction[]
  product        Product[]
  transactions   Transaction[]
  report         Report[]
  wallet         Wallet?

  @@map("users")
}

model Auction {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  productId   String       @unique @db.ObjectId
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentBid  Float
  bidderId    String       @db.ObjectId
  user        User         @relation(fields: [bidderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  auction_log Auction_log?
}

model Auction_log {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  auctionId      String   @unique @db.ObjectId
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bidding_amount Float[]
  bidder_id      String[]
}

model Transaction {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice              Float
  currency                String
  create_transaction_date DateTime          @default(now())
  status                  String?
  userId                  String?           @db.ObjectId
  deliveryStatus          String?
  paymentIntentId         String?            @unique
  address                 Address?
  products                CartProductType[]
  product                 Product[]
  user                    User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
  id          String
  name        String
  description String
  quantity    Int
  price       Float
  img         String[]
  tag         String[]
}

type Address {
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}

model Wallet {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  creditCard String
  cash       Float
  userId     String? @unique @db.ObjectId
  User       User?   @relation(fields: [userId], references: [id])
}

model Report {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  reportPicture     String[]
  reportingUserID   String
  reportDescription String
  reportStatus      String
  reportSelection   String[]
  userId            String?  @db.ObjectId
  reportedUser      User?    @relation(fields: [userId], references: [id])

  @@map("reports")
}

model Management {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  tax       Float
  categorys Category[]

  @@map("managements")
}

model Category {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  Management   Management? @relation(fields: [managementId], references: [id])
  managementId String?     @map("_managementId") @db.ObjectId

  @@map("category")
}
